You have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.

Return true if the edges of the given graph make up a valid tree, and false otherwise.

 

Example 1:

Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]
Output: true

Example 2:

Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
Output: false
 

Constraints:

1 <= n <= 2000
0 <= edges.length <= 5000
edges[i].length == 2
0 <= ai, bi < n
ai != bi
There are no self-loops or repeated edges.





SOLUTION

Use Disjoint Set union-find problem to solve this. Tree has exactly N-1 edges and no cycles

class Solution {
    public boolean validTree(int n, int[][] edges) {
        
        class UnionFind {
             int[] root;
             int[] rank;
            
            UnionFind(int size) {
                root = new int[size];
                rank = new int[size];
                for(int i = 0; i < size; i++) {
                    root[i] = i;
                    rank[i] = 1;
                }
            }
            
            int find(int x) {
                //find root node of x
                if (x != root[x]) {
                    root[x] = find(root[x]);
                }
                return root[x];
            }
            
            boolean union(int x, int y) {
                int rootX = find(x);
                int rootY = find(y);
                
                if (rootX == rootY) {
                    return false;
                }
                
                if (rank[rootX] > rank[rootY]) {
                    root[rootY] = rootX;
                } else if(rank[rootX] < rank[rootY]) {
                    root[rootX] = rootY;
                } else {
                    root[rootY] = rootX;
                    rank[rootX] += 1;
                }
                return true;
            }
        }
        //Case 1: Tree always has N-1 edges
        // less than N-1 edges -> all nodes cannot be connected
        // more than N-1 edges imply there is definitely a cycle
        if (edges.length != n-1) {
            return false;
        }
        
        UnionFind uf = new UnionFind(n);
        for(int i = 0; i < edges.length; i++) {
            if(!uf.union(edges[i][0], edges[i][1])) {
                return false;
            }
        }
        return true;
    }
}


