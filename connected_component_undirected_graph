class Solution {
    class UnionFind {
        int[] root;
        int[] rank;
        
        UnionFind(int size) {
            root = new int[size];
            rank = new int[size];
             // Assign each node to be its own root node
            for (int i = 0; i < root.length; i++) {
                root[i] = i;
                rank[i] = 1;
            }
        }
        
        //Path compression to optimize find operation of disjoint set
        private int find(int x) {
            if (x != root[x]) {
                root[x] = find(root[x]);
            }
            return root[x];
        }

        // Union By Rank method to optimize union operation of disjoint set
       public void union (int x, int y) {
            int rootX = find(x);
            int rootY = find(y);

            if (rootX > rootY) {
                root[rootY] = rootX;
            } else if (rootX < rootY) {
                 root[rootX] = rootY;
            } else {
                root[rootY] = rootX;
                rank[rootX] += 1;
            }
        }

       public  boolean connected(int x, int y) {
            return find(x) == find(y);
        }
        
        public int connectedSets() {
            Set<Integer> result = new HashSet<Integer>();
            for (int i = 0; i < root.length; i++) {
                result.add(find(i));
            }
            return result.size();
        }
    }
    public int countComponents(int n, int[][] edges) {
        UnionFind uf = new UnionFind(n);
        for(int i = 0; i < edges.length; i++) {
            uf.union(edges[i][0], edges[i][1]);
        }
        return uf.connectedSets();
        
    }
}